{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Bash Exercise 2: Working with a GTF file"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Hack to handle broekn pipes in Jupyter - Just EXECUTE and IGNORE."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "cleanup () { \n",
    "    :\n",
    "}\n",
    "\n",
    "trap \"cleanup\" SIGPIPE"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**1**. Create a subfolder called `refs` if it does not exist. You will work in the `refs` folder for the rest of this exercise - i.e. make this your working directory.\n",
    "\n",
    "Download the compressed GTF file for *Cryptococcus neormans* from \n",
    "```\n",
    "ftp://ftp.ensemblgenomes.org/pub/release-39/fungi/gtf/fungi_basidiomycota1_collection/cryptococcus_neoformans_var_grubii_h99/Cryptococcus_neoformans_var_grubii_h99.CNA3.39.gtf.gz\n",
    "```\n",
    "\n",
    "to the `refs` folder maitaining its origanl name `Cryptococcus_neoformans_var_grubii_h99.CNA3.39.gtf.gz`. \n",
    "\n",
    "Note: You can use `wget` or `curl` to download the file."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**2**. Unzip the downloaded file. Use `ls` to see the contents of the `refs` directory."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**3**. Create a variable GTF for the filename. For bonus points, assign GTF to the output of `ls`. Inspect the first 10 lines of this file."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**4**. Show only comment lines (those starting with `#`) \n",
    "\n",
    "Hint: Use `grep` and an apppropriate regular expression."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**5**. A properly formatted GTF file has 9 columns separated by tabs `\\t`. \n",
    "\n",
    "See [ref](https://www.gencodegenes.org/gencodeformat.html) for what information is in each column. From the linked site, here is a summary\n",
    "\n",
    "```\n",
    "1\tchromosome name\tchr{1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,X,Y,M}\n",
    "2\tannotation source\t{ENSEMBL,HAVANA}\n",
    "3\tfeature-type\t{gene,transcript,exon,CDS,UTR,start_codon,stop_codon,Selenocysteine}\n",
    "4\tgenomic start location\tinteger-value (1-based)\n",
    "5\tgenomic end location\tinteger-value\n",
    "6\tscore (not used) \t.\n",
    "7\tgenomic strand\t{+,-}\n",
    "8\tgenomic phase (for CDS features) \t{0,1,2,.}\n",
    "9\tadditional information as key-value pairs (format: key \"value\";)\n",
    "```\n",
    "\n",
    "Show the first 6 lines of columns 1,3,4, and 5.\n",
    "\n",
    "Hint: You can use `grep -v` to exclude unwanted lines."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**6**. Count how many of each feature (column 3) there are in the GTF."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**7**. Show all the unique crhomosomes of the fungus, in ascending numeric order."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**8**. Extract all unique `gene_id` values found in column 9 and save to a new file called `geen_counts.txt`. You can assume that `geen_id` is always the first field in column 9. Remove double quotes aorund gene_ids.\n",
    "\n",
    "The first few lines of the file (shownn using `head`) looks lik this\n",
    "\n",
    "```\n",
    "CNAG_00001\n",
    "CNAG_00002\n",
    "CNAG_00003\n",
    "CNAG_00004\n",
    "CNAG_00005\n",
    "CNAG_00006\n",
    "CNAG_00007\n",
    "CNAG_00008\n",
    "CNAG_00009\n",
    "CNAG_00010\n",
    "```"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Optional challenging exercises\n",
    "\n",
    "Use `awk`."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**9**. Are there any non-header lines with more or less than 9 TAB-separated lines? How many non-header lines with exactly 9 columns are ther? (Warning: This is quite challegning and an optional exercise)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**10**. How many gene features are there in chromosome 2?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "\n",
    "\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Bash",
   "language": "bash",
   "name": "bash"
  },
  "language_info": {
   "codemirror_mode": "shell",
   "file_extension": ".sh",
   "mimetype": "text/x-sh",
   "name": "bash"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
