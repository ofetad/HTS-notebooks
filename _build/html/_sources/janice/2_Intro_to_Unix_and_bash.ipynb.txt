{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Introduction to Unix and bash"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": true
   },
   "source": [
    "## What is an operating system?\n",
    "\n",
    "Most of you probably know that Unix (Linux), like Windows and MacOS, is an operating system (OS). An operating system is essentially the interface between applications (such as Word or your browser) and the computer itself (devices, memory, etc.) \n",
    "\n",
    "### We usually interact with the OS using a Graphical User Interface (GUI).\n",
    "\n",
    "Those are the 'windows' that made microsoft into the giant it is today. We open windows into the OS (formally known as DOS). We point and click to find files, open programs, etc. This has the advantage that it is natural for the user. A disadvantage is that pointing and clicking isn't exactly 'reproducible'. We don't have a record of everything we have done - and that is something we really want when analyzing data.\n",
    "\n",
    "### Another way - the command line\n",
    "\n",
    "Unix, Windows and MacOS all have command line interfaces. We can access them via 'terminal' windows. The Jupyter environment offers two different ways to use the command line (in our case, we will use the bash shell - more on that later). There is a terminal window under the tab on the left hand side, but there is also a bash *kernel*, so that you can write commands in a notebook code cell and have them interpreted as unix commands. You will learn to use both in this course.\n",
    "\n",
    "### The unix command line interpreter is an interactive program\n",
    "\n",
    "The interpreter parses the strings you enter and calls the appropriate executable program. There are different versions of this program, of which 'bash' is one. 'sh' was the original version, written in the 1970s by Ken Thompson. It was updated over the years and finally completely re-written in 1979 by Stephen Bourne. In 1989, another shell was built on the Bourne 'sh' - and it was named 'bash' - for Bourne Again sh. There are several other flavors, but we will be using bash.\n",
    "\n",
    "#### sh? Why the hush?\n",
    "\n",
    "sh is short for 'shell'. The reason for this terminology is because you can think of this programs as hosting an environment (variables can be saved and refered to later, among other things). But shells can run any program, including other shells. So there is a notion of 'inheritance' from the environment - each subsequently called shell is contained in the other.\n",
    "\n",
    "### The main features of a shell\n",
    "\n",
    "The basic features a shell program has are some basic programming constructs (loops, conditionals, etc.) and ways to link programs together (pipes and redirections). Before we examine those, let's get a little experience working in the command line. We'll learn how to:\n",
    "\n",
    "    - print the current directory\n",
    "    - list the contents\n",
    "    - make a new directory\n",
    "    - copy and rename files\n",
    "    - examine the content of (text) files\n",
    "    - Use tab completion\n",
    "    - Use meta characters"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Exercises - basic commands\n",
    "\n",
    "From the terminal screen\n",
    "\n",
    "1. Print the current directory\n",
    "2. Make a directory called 'mydir'\n",
    "3. Change directory to 'mydir'\n",
    "4. Copy this notebook to mydir.\n",
    "5. Make another copy of this notebook named 'copy'\n",
    "6. List the contents of the directory\n",
    "7. List the contents of the directory in long form with permissions and modification times\n",
    "8. Sort the list by time.\n",
    "9. Sort the list in reverse order.\n",
    "10. List all files in the parent directory.\n",
    "11. List all files in the parent directory with extension `.ipynb`\n",
    "12. List all files in the parent directory that have an '_' as the second character in the name.\n",
    "\n",
    "#### Command glossary\n",
    "\n",
    "- ls (list)\n",
    "- mkdir (make directory)\n",
    "- cp (copy file)\n",
    "- mv (rename file)\n",
    "- pwd (print working directory)\n",
    "\n",
    "#### meta characters\n",
    "\n",
    "- `*` matches all\n",
    "- ? matches a single character\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Programming constructs in bash\n",
    "\n",
    "#### loops\n",
    " \n",
    " - **for loops** \n",
    " \n",
    "    Use for iterating over a fixed number of items (may be unknown at time of coding)\n",
    "   \n",
    "    `for i in $( ls ); do`\n",
    "            echo item: $i\n",
    "      `done`\n",
    "        \n",
    " - **while loops**\n",
    " \n",
    "     Use for iterating until a certain condition is met\n",
    "     \n",
    "    `while true; do`\n",
    "       echo 'hello' \n",
    "      `done`\n",
    "  \n",
    "  - **until** (really doesn't do any more than `for` or `while`\n",
    "  \n",
    "  \n",
    "  #### Conditionals (sometimes called 'flow control')\n",
    "  \n",
    "  - Simple **if-then**\n",
    "  \n",
    " `if [ \"foo\" = \"foo\" ]; then`\n",
    "         echo expression evaluated as true\n",
    "     `fi`\n",
    "            \n",
    "  - **if-then-else**\n",
    "  \n",
    "   `if [ \"foo\" = \"foo\" ]; then`\n",
    "               echo expression evaluated as true\n",
    "    `else`\n",
    "               echo expression evaluated as false\n",
    "    `fi`\n",
    "            \n",
    "            "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Exercises for loops and conditionals\n",
    "\n",
    "1. Write a for loop to repeat 'hello world' 10 times. Print the number of iteration so the output looks like:\n",
    "    1. hello world\n",
    "    2. hello world\n",
    "    3. hello world \n",
    "    etc.\n",
    " \n",
    "2. Modify the above to add the word 'again' as many times as the number of current iterations:\n",
    "   1. hello world\n",
    "   2. hello world again\n",
    "   3. hello world again again\n",
    "   etc.\n",
    "   \n",
    "3. Modify 2 to stop after 3 iterations, after printing 'enough already'.\n",
    "\n",
    "4. Modify 3 to use a while loop.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Linking programs together - pipes and I/O redirection\n",
    "\n",
    "#### I/O streams\n",
    "\n",
    "There are three standard I/O streams in Unix:\n",
    "\n",
    "- `stdin` or standard input. The default is the parent process - usually the keyboard\n",
    "- `stdout` or standard output. The default is the parent process - usually the terminal screen\n",
    "- `stderr` or standard error. Also defaults to the parent, and usually the terminal screen. The important point is that errors and output may be treated separately.\n",
    "\n",
    "#### I/O redirections using `|`, `>`, `<`\n",
    "\n",
    "A program's input and output can be redirected from the standard streams in many powerful ways:\n",
    "\n",
    "- We can store a program's output in a file to be saved. We can separately save errors (`>`).\n",
    "- We can direct a program to take input from a file rather than the keyboard (`<`).\n",
    "- We can direct a program's output to be another program's input (`|`). This allows linking of several programs to form a workflow."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Exercises\n",
    "\n",
    "1. The `ps -aef` command shows all processes currently running. Use `|` and the program `grep` to find the processes you are running (your user name is 'joyvan')\n",
    "\n",
    "2. Create a list with the filenames in the current directly using `ls` and `>`. Use `cat` to see the contents. \n",
    "\n",
    "3. What happens if you repeat the above using `>>`?"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Putting it all together - scripting\n",
    "\n",
    "The next lesson will teach you to write what are called 'scripts'. These are lists of commands saved in a file that can be executed. This makes a workflow reproducible. All of the steps are saved and can be run again in *exactly* the same manner."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "R",
   "language": "R",
   "name": "ir"
  },
  "language_info": {
   "codemirror_mode": "r",
   "file_extension": ".r",
   "mimetype": "text/x-r-source",
   "name": "R",
   "pygments_lexer": "r",
   "version": "3.4.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}
